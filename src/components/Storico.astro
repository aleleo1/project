---
import { query_full } from "../db/mysql-adapter";
import Container from "./Container";
import { DEFAULT_INITIAL_STATE, Queries } from "../constants";
import { type ContainerData } from "../interfaces";
import {
  updateUrl,
  searchParamsToObject,
  extractStates,
  updateMainURL,
  updateMainUrlRt,
  getDeviceDetails,
} from "../utils";
import Layout from "../layouts/Layout.astro";
const mainUrl = new URL(Astro.request.url);
const userAgent = Astro.request.headers.get("user-agent")!;

const defaultWidth = getDeviceDetails(userAgent).isDesktop ? 1920 : 620;
let rt = -1;
const params = mainUrl.searchParams;
const containers: Array<ContainerData> = [];
let c = params.get("c");
let state: string[] = [];
let initialUrl = mainUrl.origin;
if (!c) {
  const defaultState = { ...DEFAULT_INITIAL_STATE };
  defaultState.q = Queries.default;

  const normalState = { ...DEFAULT_INITIAL_STATE };
  normalState.q = Queries.normal;

  const watchState = { ...DEFAULT_INITIAL_STATE };
  watchState.q = Queries.watch;

  const advisoryState = { ...DEFAULT_INITIAL_STATE };
  advisoryState.q = Queries.advisory;

  const volcanicCloudsTrackingState = { ...DEFAULT_INITIAL_STATE };
  volcanicCloudsTrackingState.q = Queries.volcanicCloudsTracking;

  const eruptionClassificationState = { ...DEFAULT_INITIAL_STATE };
  eruptionClassificationState.q = Queries.eruptionClassification;

  state = [
    //updateUrl(mainUrl.origin, defaultState).toString(),
    updateUrl(mainUrl.origin, normalState).toString(),
    updateUrl(mainUrl.origin, watchState).toString(),
    updateUrl(mainUrl.origin, advisoryState).toString(),
    //problematiche:
    //updateUrl(mainUrl.origin, volcanicCloudsTrackingState).toString(),
    //updateUrl(mainUrl.origin, eruptionClassificationState).toString(),
  ];
} else {
  rt = mainUrl.searchParams.get("rt")
    ? Number(mainUrl.searchParams.get("rt"))
    : -1;
  state = extractStates(params);
}
for (let i = 0; i < state.length; i++) {
  const s = searchParamsToObject(
    new URL(state[i]).searchParams.toString(),
    DEFAULT_INITIAL_STATE,
  );
  s.action = DEFAULT_INITIAL_STATE.action;

  const result = await query_full(s.date, s.q, s.rif, s.action);
  containers.push({ state: s, result });
  initialUrl = updateMainURL(
    initialUrl,
    updateUrl(mainUrl.origin, s).toString(),
    i,
  );
}
if (rt > 0 && containers.length === 1) {
  rt = 0;
}
initialUrl = updateMainUrlRt(initialUrl, rt);
---

<Layout>
  <span
    id="tmpUrl"
    data-value={initialUrl}
    class="absolute hidden z-100 top-0 left-0"></span>
  <script lang="javascript">
    window.history.pushState(
      {},
      "",
      document.getElementById("tmpUrl").getAttribute("data-value"),
    );
  </script>
  <div class="flex flex-col justify-center align-middle gap-y-2.5">
    {
      containers.map(({ result, state }, index) => (
        <div class="h-[700px]">
          <h1 class="text-center">{state.q}</h1>
          <Container
            data={result}
            initialState={state}
            url={updateUrl(mainUrl.origin, state).toString()}
            index={index}
            dw={defaultWidth}
            tmpUrl={initialUrl}
            client:visible
          />
        </div>
      ))
    }
  </div>
</Layout>
<style is:global>
  .invisible-clickable {
    fill: transparent;
    cursor: pointer;
  }
  .tooltip {
    opacity: 0;
    transition: opacity 0.3s;
  }
  .invisible-clickable:hover + .tooltip {
    opacity: 1;
  }
  .tooltip-bg {
    fill: #333;
    rx: 4;
    ry: 4;
  }
  .tooltip-text {
    font-family: Arial, sans-serif;
    font-size: 12px;
    fill: white;
  }
</style>
