name: Build and Test with MySQL

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Start MySQL Container
        run: |
          docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} -e MYSQL_USER=ufpv_manager -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -e MYSQL_DATABASE=ingv -p 3306:3306 -d mysql:latest --default-authentication-plugin=mysql_native_password

      - name: Wait for MySQL to start
        run: |
          sleep 10 # Give MySQL some time to start
          docker exec mysql-container mysqladmin ping -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Build Node.js Docker Image
        run: docker build -t my-node-app .

      - name: Run Node.js Docker Container (Optional - for testing)
        run: |
          docker run --name my-app-container -p 4321:4321 --link mysql-container:mysql-container -e MYSQL_HOST=mysql-container -e MYSQL_USER=ufpv_manager -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -e MYSQL_DATABASE=ingv -e MYSQL_PORT=3306 my-node-app &
          sleep 5 # Give the app some time to start
          curl http://localhost:4321/ # Replace with your actual health check endpoint

      - name: Stop and Remove Containers
        if: always()
        run: |
          docker stop mysql-container my-app-container || true
          docker rm mysql-container my-app-container || true
